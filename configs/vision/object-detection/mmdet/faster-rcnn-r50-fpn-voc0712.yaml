name: "CIFAR10-ResNet"

const:
  num_gpus: "len({trainer.gpus})"
  samples_per_gpu: 2
  val_samples_per_gpu: 1

dataloader:
  base_dataloader: # depends on hardware:)
    sampler: null
    batch_sampler: null
    num_workers: "2*{const.num_gpus}"
    pin_memory: True
    collate_fn:
      name: mmcv_parallel_collate
  trn:
    batch_size: "{const.samples_per_gpu}*{const.num_gpus}"
    shuffle: True
    collate_fn:
      args:
        samples_per_gpu: "{const.samples_per_gpu}"
    # Extend default_collate to add support for:type:`~mmcv.parallel.DataContainer`.
  val:
    batch_size: "{const.val_samples_per_gpu}*{const.num_gpus}"
    shuffle: False
    collate_fn:
      args:
        samples_per_gpu: "{const.val_samples_per_gpu}"
  test:
    batch_size: "{const.val_samples_per_gpu}*{const.num_gpus}"
    shuffle: False
    collate_fn:
      args:
        samples_per_gpu: "{const.val_samples_per_gpu}"

debug:
  view_train_augmentation:
    is_xywh: True
    preprocess_f: convert-mmdetbbox
training:
  ID: "ClassificationTrainer"

  epochs: 200
  lr: 0.03

  optimizer: "sgd"
  optimizer_cfg:
    lr: "{training.lr}"
    momentum: 0.9
    weight_decay: 0.0005

  lr_scheduler:
    name: "cosine"
    args:
      T_max: "{training.epochs}"
    cfg:
      interval: "epoch"

  metrics:
    loss:
      when: "trn,val,test"
      name: "MeanMetric"
      file: "torchmetrics"
      update:
        value: "cls_loss"
    confusion_matrix:
      interval: { "trn": 50, "val": 5 }
      when: "trn,val,test"
      name: "ConfusionMatrix"
      file: "torchmetrics"
      args:
        num_classes: "{const.num_classes}"
      update:
        preds: "logits"
        target: "y"
    accuracy:
      when: "trn,val,test"
      name: "Accuracy"
      file: "torchmetrics"
      update:
        preds: "logits"
        target: "y"

callbacks:
  - name: ModelCheckpoint
    file: lightning
    args:
      monitor: "epoch_val/accuracy"
      mode: "max"
      save_last: True
      save_top_k: 1
  - name: "LearningRateMonitor"
    file: "lightning"
    args:
      logging_interval: "epoch"

model:
  backbone:
    TYPE: "custom"
    ID: "ResNet18"
    out_features: 512
    cfg:
      low_res: True
  modules:
    classifier:
      name: ClassificationHead
      input: "output"
      args:
        reduction: "gap"
        in_features: "{model.backbone.out_features}"
        dropout: 0.2
        num_classes: "{const.num_classes}"
        return_logits: True # return logits instead of softmax probability.
    loss_fn:
      name: "CrossEntropyLoss"

wandb:
  name: "FasterRCNN-ResNet50-FPN-VOC0712"
  project: ""
